<?xml version="1.0" encoding="UTF-8"?>

<!-- *Do not use any later versions than 2.4.12 due to [a bug in Phing](http://www.phing.info/trac/ticket/958)*. -->
<project name="scoop" default="help" phingVersion="2.4.11">

    <!-- fetches variables from local properties, if they exist -->
    <if>
        <available file="build.properties.local"/>
        <then>
            <property file="build.properties.local"/>
        </then>
    </if>
    <!-- loads missing variables from default -->
    <property file="build.properties"/>

    <!-- prints help text -->
    <target name="help" description="Shows list of Phing targets">
        <exec executable="phing"
              passthru="true">
            <arg value="-l"/>
        </exec>
    </target>

    <!-- does everything -->
    <target name="build"
            description="Installs the site and migrates content"
            depends="make, site-install,
                   run-migrate,
                   aliases,
                   check-features"/>

    <!-- fetches and organizes code base -->
    <target name="make"
            depends="setup-phing-drush"
            description="Rebuilds the profile using Drush make">

        <!-- clones the makefile in a temporary directory -->
        <phingcall target="setup-git-repo">
            <property name="repo.dir"
                      value="${phing.tempdir}"/>
            <property name="repo.url"
                      value="${drupal.make.repo}"/>
            <property name="repo.revision"
                      value="${drupal.make.revision}"/>
        </phingcall>

        <!-- fetches the code using drush make -->
        <if>
            <istrue value="${drupal.make.working_copy}"/>
            <then>
                <!-- makes and keeps the working copies -->
                <drush command="make" assume="yes">
                    <option name="working-copy"></option>
                    <param>${phing.tempdir}/${drupal.make.makefile}</param>
                    <param>docroot</param>
                </drush>
            </then>
            <else>
                <!-- makes normal -->
                <drush command="make" assume="yes">
                    <param>${phing.tempdir}/${drupal.make.makefile}</param>
                    <param>docroot</param>
                </drush>
            </else>
        </if>

        <!-- Clean the temporary directory, we don't need this anymore -->
        <delete dir="${phing.tempdir}"/>

    </target>

    <!-- Removes all files of the Drupal installation -->
    <target name="clean"
            description="Removes a Drupal installation. Use carefully!"
            depends="">
        <foreach
                list="includes,misc,modules,profiles,scripts,sites,themes,phing"
                param="item" target="delete-dir" delimiter=","/>
        <foreach
                list=".htaccess,authorize.php,CHANGELOG.txt,LICENSE.txt,COPYRIGHT.txt,cron.php,index.php,INSTALL.mysql.txt,INSTALL.pgsql.txt,install.php,INSTALL.sqlite.txt,INSTALL.txt,MAINTAINERS.txt,README.txt,PATCHES.txt,robots.txt,update.php,UPGRADE.txt,web.config,xmlrpc.php"
                param="item" target="delete-file" delimiter=","/>
    </target>

    <target name="delete-dir">
        <delete dir="${item}"/>
    </target>

    <target name="delete-file">
        <delete file="${item}" verbose="true"/>
    </target>


    <target name="setup-dirs"
            depends="">
        <property name="project.drupal.dir"
                  value="${project.basedir}"/>

        <property name="project.sitesdir"
                  value="${project.drupal.dir}/${project.code.dir}"/>

        <property name="project.toolsdir"
                  value="${project.basedir}/sites/all/drush"/>

    </target>


    <target name="setup-permissions"
            depends="setup-dirs">
        <!-- Allow write access to files directory. -->
        <chmod mode="0777" failonerror="false">
            <fileset dir="${project.drupal.dir}">
                <patternset>
                    <include name="sites/default"/>
                    <include name="sites/default/**/*"/>
                </patternset>
            </fileset>
        </chmod>
        <!-- If the build uses SQLite then we update permissions to the
             database file and the directory containing the file. -->
        <if>
            <contains string="${drupal.db.url}" substring="sqlite"/>
            <then>
                <php expression="dirname(substr('${drupal.db.url}', 7));"
                     returnProperty="drupal.sqlite.dir"/>
                <php expression="basename(substr('${drupal.db.url}', 7));"
                     returnProperty="drupal.sqlite.file"/>
                <chmod file="${drupal.sqlite.dir}" mode="0777"
                       failonerror="true"/>
                <chmod file="${drupal.sqlite.dir}/${drupal.sqlite.file}"
                       mode="0777" failonerror="true"/>
            </then>
        </if>
    </target>

    <!-- installs the site -->
    <target name="site-install"
            depends="setup-phing-drush"
            description="Installs the site using drush site-install"
            unless="project.installed">
        <drush command="site-install" assume="yes">
            <option name="db-url">${drupal.db.url}</option>
            <option name="site-name">${drupal.site.name}</option>
            <param>${drupal.profile}</param>
        </drush>

        <!-- Revert features so all configuration is guaranteed to be in place. Since features 2.0 this is necessary -->
        <drush command="features-revert-all" assume="yes">
        </drush>

        <phingcall target="setup-permissions"/>


        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.installed" value="true"/>
    </target>

    <!-- ### Run migrate procedures -->
    <target name="run-migrate"
            description="Migrate content into the installed site"
            depends="setup-phing-drush">
        <!-- Enable migrate and migrate_ui -->
        <drush command="en" assume="yes">
            <param>migrate,migrate_ui</param>
        </drush>
        <if>
            <istrue value="${drupal.migrate}"/>
            <then>
                <!-- Register automatically again. Sometimes migrate tasks are not properly registered on a fresh install. -->
                <drush command="migrate-auto-register" assume="yes">
                </drush>
                <!-- Migrate all. Here we assume we do have the migrate module enabled, but this is part of our standard stack. -->
                <drush command="mi" assume="yes">
                    <option name="all"></option>
                </drush>
            </then>
        </if>
    </target>

    <!-- ### Check features state -->
    <target name="check-features"
            depends="setup-phing-drush">
        <drush command="features" assume="yes">
        </drush>
    </target>

    <!-- ### Enable dev mode -->
    <target name="enable-dev-mode"
            description="Configures this installation for use in development"
            depends="setup-phing-drush">
        <drush command="en" assume="yes">
            <param>devel, admin_menu, environment_indicator, devel,
                devel_generate
            </param>
        </drush>
    </target>

    <!-- ### Clone a git repository -->
    <target name="setup-git-repo">
        <!-- Only clone if repository does not exist already -->
        <if>
            <not>
                <available file="${repo.dir}"/>
            </not>
            <then>
                <!-- Set revision to HEAD if not already defined -->
                <property name="repo.revision" value="HEAD" override="false"/>

                <echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}
                </echo>
                <!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask)
                     does not seem to work. Use exec instead. -->
                <exec command="git clone ${repo.url} ${repo.dir}"/>
                <exec command="git checkout ${repo.revision}"
                      dir="${repo.dir}"/>
            </then>
        </if>
    </target>

    <!-- ### Setup Phing Drush integration -->
    <target name="setup-phing-drush"
            depends="setup-dirs">
        <!-- Clone the project -->
        <phingcall target="setup-git-repo">
            <property name="repo.dir"
                      value="${phing.toolsdir}/phing-drush"/>
            <property name="repo.url"
                      value="${phing.drush.repository.url}"/>
            <property name="repo.revision"
                      value="${phing.drush.repository.revision}"/>
        </phingcall>

        <!-- Register as custom Phing task -->
        <taskdef name="drush" classname="DrushTask"
                 classpath="${phing.toolsdir}/phing-drush"/>

        <!-- runs drush from the project Drupal directory -->
        <property name="drush.root"
                  value="${project.drupal.dir}/${drupal.folder}"/>
    </target>

    <target name="behat" description="Run Scenario with Behat"
            depends="setup-dirs">
        <property name="behat.basedir"
                  value="${project.basedir}/${profile.dir}/tests/behat"/>
        <exec executable="${behat.basedir}/bin/behat">
            <arg line=" --config='${behat.basedir}/behat.yml' --format=pretty --out='${project.basedir}/logs/behat' ${behat.basedir}/features"/>
        </exec>
    </target>

    <!-- creates a drush aliases file -->
    <target name="aliases" description="Creates a drush aliases file"
            depends="">
        <property name="aliases.file" value="aliases.drushrc.php"/>
        <if>
            <not>
                <available file="${aliases.file}"/>
            </not>
            <then>
                <touch file="${aliases.file}"/>
                <chmod file="${aliases.file}" mode="755" failonerror="true"/>
                <append destFile="${aliases.file}"
                        text="&lt;&#63;php ${line.separator}"/>
                <append destFile="${aliases.file}"
                        text="$aliases['${project.alias}'] = array(${line.separator}  'parent' => '${project.alias.parent}',${line.separator}  'uri' => '${project.uri}',${line.separator}  'root' => '${project.root}',${line.separator}  'path-aliases' => array(${line.separator}    '%files' => '${project.files.folder}',${line.separator}  ),${line.separator});${line.separator}"/>
            </then>
        </if>
    </target>

</project>
